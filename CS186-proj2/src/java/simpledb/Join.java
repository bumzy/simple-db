package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private JoinPredicate p = null;
    private DbIterator[] children = null;
    private TupleDesc td = null;
    private Tuple pre = null;
    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     *
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        this.p = p;
        this.children = new DbIterator[]{child1, child2};
        TupleDesc td1 = child1.getTupleDesc();
        TupleDesc td2 = child2.getTupleDesc();
        this.td = TupleDesc.merge(td1, td2);
        this.pre = null;
    }

    public JoinPredicate getJoinPredicate() {
        return p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        TupleDesc td1 = children[0].getTupleDesc();
        int field1 = p.getField1();
        return td1.getFieldName(field1);
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        TupleDesc td2 = children[1].getTupleDesc();
        int field2 = p.getField2();
        return td2.getFieldName(field2);
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return this.td;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        super.open();
        children[0].open();
        children[1].open();
    }

    public void close() {
        children[1].close();
        children[0].close();
        super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        children[1].rewind();
        children[0].rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        DbIterator child1 = children[0];
        DbIterator child2 = children[1];
        while (pre != null || child1.hasNext()) {
            Tuple t1 = null;
            if (pre != null) {
                t1 = pre;
                pre = null;
            } else {
                t1 = child1.next();
                child2.rewind();
            }
            while (child2.hasNext()) {
                Tuple t2 = child2.next();
                if (p.filter(t1, t2)) {
                    Tuple t = new Tuple(this.td);
                    int k = 0;
                    for (int i = 0; i < t1.getTupleDesc().numFields(); i++) {
                        t.setField(k, t1.getField(i));
                        k++;
                    }
                    for (int i = 0; i < t2.getTupleDesc().numFields(); i++) {
                        t.setField(k, t2.getField(i));
                        k++;
                    }
                    pre = t1;
                    return t;
                }
            }
        }
        return null;
    }

    @Override
    public DbIterator[] getChildren() {
        return children;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        this.children = children;
    }

}
